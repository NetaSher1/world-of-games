pipeline {
    agent { label 'my-laptop' } // Adjust the agent label if needed

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the repository...'
                checkout scm // Clone the repository
            }
        }

        stage('Build') {
            steps {
                echo 'Building Docker image...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def imageTag = "${DOCKER_USER}/world-of-games:lts" // Use a generic tag
                        bat "docker build -t ${imageTag} ."
                    }
                }
            }
        }

        stage('Run') {
            steps {
                echo 'Running the Dockerized application...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def imageTag = "${DOCKER_USER}/world-of-games:lts" // Use a generic tag

                        echo "Running Docker container with image tag: ${imageTag}" // Debug print
                        
                        // Run the Docker container in detached mode
                        bat "docker run -d --name scores_app -p 8777:8777 ${imageTag}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running Selenium tests inside the container...'
                script {
                    def exitCode = bat(script: '''
                        docker exec scores_app python tests/e2e.py
                    ''', returnStatus: true)

                    if (exitCode == 0) {
                        echo "Tests passed"
                    } else {
                        error "Tests failed with exit code ${exitCode}"
                    }
                }
            }
        }

        stage('Finalize') {
            steps {
                echo 'Finalizing...'
                script {
                    // Check if the container exists before stopping/removing
                    def containerExists = bat(script: 'docker ps -a --filter "name=scores_app" -q', returnStdout: true).trim()
                    if (containerExists) {
                        bat '''
                            docker stop scores_app || exit 0
                            docker rm scores_app || exit 0
                        '''
                    } else {
                        echo "Container 'scores_app' does not exist. Skipping stop/remove."
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat '''
                            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                            docker push ${DOCKER_USER}/world-of-games:lts
                        '''
                    }
                }
            }
        }
    }

    post {
        failure {
            mail to: 'neta.sher@ness-tech.co.il',
                 subject: "Pipeline Failed: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                 body: "Something went wrong in the pipeline. Check Jenkins for more details."
        }
        always {
            echo 'Cleaning up...'
            bat '''
                docker stop scores_app || exit 0
                docker rm scores_app || exit 0
            ''' // Ensure the container is stopped and removed
        }
    }
}
